// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhysicalTherapyProject.Persistance.Data;

namespace PhysicalTherapyProject.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201019154047_AddedEventPriceToPost")]
    partial class AddedEventPriceToPost
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4921241c-656f-4ba2-b80a-4a4bb3005830",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 138, DateTimeKind.Local).AddTicks(1350),
                            Name = "Administratorius",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 138, DateTimeKind.Local).AddTicks(3087)
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "0c9e83bc-bab1-4d77-9a47-ef15d3551daa",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 138, DateTimeKind.Local).AddTicks(7195),
                            Name = "Naudotojas",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 138, DateTimeKind.Local).AddTicks(7246)
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "88ebca37-15a3-4063-b795-7430a629d405",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 138, DateTimeKind.Local).AddTicks(7368),
                            Name = "Registruotas naudotojas",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 138, DateTimeKind.Local).AddTicks(7399)
                        });
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("OccupationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OccupationId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Occupation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(6506),
                            Name = "Studentas",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(6527)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(7279),
                            Name = "Dėstytojas",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(7298)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(7311),
                            Name = "Kineziterapeutas",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(7315)
                        });
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EventPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PostTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PostUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isForAuthenticatedUser")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PostTypeId");

                    b.HasIndex("PostUserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 136, DateTimeKind.Local).AddTicks(9497),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 1,
                            Title = "What is Lorem Ipsum?",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 136, DateTimeKind.Local).AddTicks(9538),
                            isForAuthenticatedUser = false
                        },
                        new
                        {
                            Id = 2,
                            Body = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5185),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 1,
                            Title = "1914 translation by H. Rackham",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5210),
                            isForAuthenticatedUser = false
                        },
                        new
                        {
                            Id = 3,
                            Body = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5281),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 1,
                            Title = "The standard Lorem Ipsum passage, used since the 1500s",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5287),
                            isForAuthenticatedUser = false
                        },
                        new
                        {
                            Id = 4,
                            Body = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5293),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 1,
                            Title = "Where does it come from?",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5297),
                            isForAuthenticatedUser = false
                        },
                        new
                        {
                            Id = 5,
                            Body = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5302),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 1,
                            Title = "Where can I get some?",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5306),
                            isForAuthenticatedUser = false
                        },
                        new
                        {
                            Id = 6,
                            Body = "Prezidentė: INESA RIMDEIKIENĖ 861112265 inesa.rimdeikiene@kaunoklinikos.lt Pareigos: draugijos valdybos ir narių atstovavimas, bendravimas su valstybinėmis institucijomis",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5311),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 4,
                            Title = "Where can I get some?",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5314),
                            isForAuthenticatedUser = false
                        },
                        new
                        {
                            Id = 7,
                            Body = "RAIMUNDAS VENSKAITIS 862237888 raimundas.venskaitis@gmail.com Pareigos:  draugijos internetinio puslapio ir Facebook paskyros valdymas ir priežiūra",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5319),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 4,
                            Title = "Where can I get some?",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5323),
                            isForAuthenticatedUser = false
                        },
                        new
                        {
                            Id = 8,
                            Body = "DOVILĖ VALATKIENĖ –Klaipėdos <b>kr.pirmininkė<b> 861149101 dvalatkiene@yahoo.com klaipedosktd@gmail.com Pareigos: Klaipėdos krašto kineziterapeutų atstovavimas",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5327),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 4,
                            Title = "Where can I get some?",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5331),
                            isForAuthenticatedUser = false
                        },
                        new
                        {
                            Id = 9,
                            Body = "BRIGITA ZACHOVAJEVIENĖ – Kauno kr. pirmininkė 8 698 75901 brigitaz@medi.lt Pareigos: sekretorė",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5336),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 4,
                            Title = "Where can I get some?",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5339),
                            isForAuthenticatedUser = false
                        },
                        new
                        {
                            Id = 10,
                            Body = "IEVA EGLĖ JAMONTAITĖ  Vilniaus kr.pirmininkė 8 682 45413 ieva.jamontaite@gmail.com Pareigos: LKTD narių narystės tvarkos priežiūra",
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5345),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPrice = 0m,
                            PostTypeId = 4,
                            Title = "Where can I get some?",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 137, DateTimeKind.Local).AddTicks(5349),
                            isForAuthenticatedUser = false
                        });
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.PostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PostTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 130, DateTimeKind.Local).AddTicks(707),
                            Name = "Article",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 134, DateTimeKind.Local).AddTicks(8841)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 135, DateTimeKind.Local).AddTicks(1435),
                            Name = "Event",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 135, DateTimeKind.Local).AddTicks(1482)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 135, DateTimeKind.Local).AddTicks(1548),
                            Name = "Advertisment",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 135, DateTimeKind.Local).AddTicks(1556)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 135, DateTimeKind.Local).AddTicks(1561),
                            Name = "TeamMember",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 135, DateTimeKind.Local).AddTicks(1566)
                        });
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 138, DateTimeKind.Local).AddTicks(9067),
                            TagValue = "Naujienos",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 138, DateTimeKind.Local).AddTicks(9097)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 139, DateTimeKind.Local).AddTicks(454),
                            TagValue = "Renginys",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 139, DateTimeKind.Local).AddTicks(488)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 139, DateTimeKind.Local).AddTicks(543),
                            TagValue = "Mokymai",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 139, DateTimeKind.Local).AddTicks(565)
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 139, DateTimeKind.Local).AddTicks(585),
                            TagValue = "Mokslas",
                            UpdatedOn = new DateTime(2020, 10, 19, 18, 40, 47, 139, DateTimeKind.Local).AddTicks(605)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PhysicalTherapyProject.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PhysicalTherapyProject.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PhysicalTherapyProject.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PhysicalTherapyProject.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhysicalTherapyProject.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PhysicalTherapyProject.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("PhysicalTherapyProject.Domain.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("PhysicalTherapyProject.Domain.Models.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.Image", b =>
                {
                    b.HasOne("PhysicalTherapyProject.Domain.Models.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.Post", b =>
                {
                    b.HasOne("PhysicalTherapyProject.Domain.Models.PostType", "PostType")
                        .WithMany()
                        .HasForeignKey("PostTypeId");

                    b.HasOne("PhysicalTherapyProject.Domain.Models.ApplicationUser", "PostUser")
                        .WithMany("UserPosts")
                        .HasForeignKey("PostUserId");
                });

            modelBuilder.Entity("PhysicalTherapyProject.Domain.Models.PostTag", b =>
                {
                    b.HasOne("PhysicalTherapyProject.Domain.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhysicalTherapyProject.Domain.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
